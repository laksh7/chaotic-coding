#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Oct 10 11:24:46 2017

@author: lakshmi
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


# This is an RK4 stepper for 3D coupled ODE systems
def RK4stepper(fx, fy, fz, x, y, z, h=0.005):  # fx, fy, fz, are the ODEs
    # x, y, z are the three coupled variables, and h is the step size
    k1 = fx(x, y, z)   # first RK coeff. for x
    l1 = fy(x, y, z)   # first RK coeff. for y
    m1 = fz(x, y, z)   # first RK coeff. for z
    # second RK coefficient
    k2 = fx(x + 0.5 * h * k1, y + 0.5 * h * l1, z + 0.5 * h * m1)
    l2 = fy(x + 0.5 * h * k1, y + 0.5 * h * l1, z + 0.5 * h * m1)
    m2 = fz(x + 0.5 * h * k1, y + 0.5 * h * l1, z + 0.5 * h * m1)
    # third RK coefficient for x, y, z
    k3 = fx(x + 0.5 * h * k2, y + 0.5 * h * l2, z + 0.5 * h * m2)
    l3 = fy(x + 0.5 * h * k2, y + 0.5 * h * l2, z + 0.5 * h * m2)
    m3 = fz(x + 0.5 * h * k2, y + 0.5 * h * l2, z + 0.5 * h * m2)
    # fourth RK coefficient for x, y, z
    k4 = fx(x + h * k3, y + h * l3, z + h * m3)
    l4 = fy(x + h * k3, y + h * l3, z + h * m3)
    m4 = fz(x + h * k3, y + h * l3, z + h * m3)
    # new x, y , z, after one step of rk4
    x = x + (h/6) * (k1 + 2 * k2 + 2 * k3 + k4)
    y = y + (h/6) * (l1 + 2 * l2 + 2 * l3 + l4)
    z = z + (h/6) * (m1 + 2 * m2 + 2 * m3 + m4)
    return x, y, z


def RK4(fx, fy, fz, x0, y0, z0):
    """Performs a 10000 step integration of a 3d coupled ODE system"""
    dx = fx
    dy = fy
    dz = fz
    xs[0] = 0.1               # initial condition for x
    ys[0] = 0.1              # initial condition for y
    zs[0] = 0.1              # initial condition for z
    for i in range(9999):
        xs[i+1], ys[i+1], zs[i+1] = RK4stepper(dx, dy, dz, xs[i], ys[i], zs[i], h=0.005)
    return[xs, ys, zs]


xs = np.empty(10000)            # preallocating for x
ys = np.empty(10000)            # preallocating for y
zs = np.empty(10000)            # preallocating for z


# now we define the lorenz functions
def dx(xs, ys, zs, sigma=10, beta=8/3, rho=400):
    dxdt = sigma * (ys - xs)
    return np.array(dxdt)


def dy(xs, ys, zs, sigma=10, beta=8/3, rho=400):
    dydt = xs * (rho - zs) - ys
    return np.array(dydt)


def dz(xs, ys, zs, sigma=10, beta=8/3, rho=400):
    dzdt = xs * ys - beta * zs
    return np.array(dzdt)

l = RK4(dx, dy, dz, xs[0], ys[0], zs[0])
a = l[0]
b = l[1]
c = l[2]

a1 = a[200: 400]
b1 = b[200: 400]
c1 = c[200: 400]

np.save('/home/lakshmi/python', a1)
